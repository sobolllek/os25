section .data
    input_filename db 'input.txt', 0
    output_filename db 'output.txt', 0
    buffer resb 512       ; буфер для данных

section .bss
    filesize resq 1       ; переменная под размер файла

section .text
    global _start

_start:
    ; 1. Открыть input.txt (O_RDONLY = 0)
    mov rax, 2              ; sys_open
    lea rdi, [rel input_filename]
    xor rsi, rsi            ; O_RDONLY
    syscall
    mov r12, rax            ; сохранить дескриптор input файла

    ; 2. Узнать размер файла: lseek(fd, 0, SEEK_END)
    mov rax, 8              ; sys_lseek
    mov rdi, r12            ; fd
    xor rsi, rsi            ; offset = 0
    mov rdx, 2              ; SEEK_END
    syscall
    mov [filesize], rax     ; сохранить размер файла
    mov r13, rax            ; сохранить в регистре тоже

    ; 3. Установить указатель в начало (lseek(fd, 0, SEEK_SET))
    mov rax, 8
    mov rdi, r12
    xor rsi, rsi
    xor rdx, rdx            ; SEEK_SET = 0
    syscall

    ; 4. Читать r13 байт
    mov rax, 0              ; sys_read
    mov rdi, r12
    lea rsi, [rel buffer]
    mov rdx, r13
    syscall
    ; RAX теперь содержит фактически прочитанное количество байт

    ; 5. Закрыть input файл
    mov rax, 3              ; sys_close
    mov rdi, r12
    syscall

    ; 6. Открыть output.txt (O_WRONLY | O_CREAT | O_TRUNC = 577)
    mov rax, 2              ; sys_open
    lea rdi, [rel output_filename]
    mov rsi, 577            ; флаги
    mov rdx, 0644           ; права доступа
    syscall
    mov r14, rax            ; сохранить дескриптор output файла

    ; 7. Записать r13 байт
    mov rax, 1              ; sys_write
    mov rdi, r14
    lea rsi, [rel buffer]
    mov rdx, r13
    syscall

    ; 8. Закрыть output файл
    mov rax, 3              ; sys_close
    mov rdi, r14
    syscall

    ; 9. Завершение
    mov rax, 60             ; sys_exit
    xor rdi, rdi            ; код возврата 0
    syscall
